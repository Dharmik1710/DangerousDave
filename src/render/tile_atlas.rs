use sdl2::rect::Rect;
use std::collections::HashMap;
use std::sync::LazyLock;


pub static TILE_MAP: LazyLock<HashMap<u8, Rect>> = LazyLock::new(|| {
    [
        (144, Rect::new(0,0,112,47)),
        (145, Rect::new(0,47,112,47)),
        (146, Rect::new(0,94,112,47)),
        (147, Rect::new(0,141,112,47)),
        (101, Rect::new(0,188,24,22)),
        (102, Rect::new(24,188,24,22)),
        (103, Rect::new(48,188,24,22)),
        (104, Rect::new(72,188,24,22)),
        (100, Rect::new(0,210,24,21)),
        (97, Rect::new(24,210,24,21)),
        (98, Rect::new(48,210,24,21)),
        (99, Rect::new(72,210,24,21)),
        (117, Rect::new(96,210,16,20)),
        (118, Rect::new(0,231,16,20)),
        (119, Rect::new(16,231,16,20)),
        (120, Rect::new(32,231,16,20)),
        (89, Rect::new(48,231,28,20)),
        (90, Rect::new(76,231,28,20)),
        (91, Rect::new(0,251,28,20)),
        (92, Rect::new(28,251,28,20)),
        (93, Rect::new(56,251,24,20)),
        (94, Rect::new(80,251,24,20)),
        (95, Rect::new(0,271,24,20)),
        (96, Rect::new(24,271,24,20)),
        (1, Rect::new(48,271,16,16)),
        (10, Rect::new(64,271,16,16)),
        (11, Rect::new(80,271,16,16)), // Wall
        (113, Rect::new(96,271,16,16)),
        (114, Rect::new(0,291,16,16)),
        (115, Rect::new(16,291,16,16)),
        (116, Rect::new(32,291,16,16)),
        (12, Rect::new(48,291,16,16)),
        (13, Rect::new(64,291,16,16)),
        (14, Rect::new(80,291,16,16)),
        (15, Rect::new(96,291,16,16)),
        (16, Rect::new(0,307,16,16)),
        (17, Rect::new(16,307,16,16)),
        (18, Rect::new(32,307,16,16)),
        (19, Rect::new(48,307,16,16)),
        (2, Rect::new(64,307,16,16)),
        (20, Rect::new(80,307,16,16)),
        (21, Rect::new(96,307,16,16)),
        (22, Rect::new(0,323,16,16)),
        (23, Rect::new(16,323,16,16)),
        (24, Rect::new(32,323,16,16)),
        (25, Rect::new(48,323,16,16)),
        (26, Rect::new(64,323,16,16)),
        (27, Rect::new(80,323,16,16)),
        (28, Rect::new(96,323,16,16)),
        (29, Rect::new(0,339,16,16)),
        (3, Rect::new(16,339,16,16)),
        (30, Rect::new(32,339,16,16)),
        (31, Rect::new(48,339,16,16)),
        (32, Rect::new(64,339,16,16)),
        (33, Rect::new(80,339,16,16)),
        (34, Rect::new(96,339,16,16)),
        (35, Rect::new(0,355,16,16)),
        (36, Rect::new(16,355,16,16)),
        (37, Rect::new(32,355,16,16)),
        (38, Rect::new(48,355,16,16)),
        (39, Rect::new(64,355,16,16)),
        (4, Rect::new(80,355,16,16)),
        (40, Rect::new(96,355,16,16)),
        (41, Rect::new(0,371,16,16)),
        (42, Rect::new(16,371,16,16)),
        (43, Rect::new(32,371,16,16)),
        (44, Rect::new(48,371,16,16)),
        (45, Rect::new(64,371,16,16)),
        (46, Rect::new(80,371,16,16)),
        (47, Rect::new(96,371,16,16)),
        (48, Rect::new(0,387,16,16)),
        (49, Rect::new(16,387,16,16)),
        (5, Rect::new(32,387,16,16)),
        (50, Rect::new(48,387,16,16)),
        (51, Rect::new(64,387,16,16)),
        (52, Rect::new(80,387,16,16)),
        (53, Rect::new(0,403,20,16)),
        (54, Rect::new(20,403,20,16)),
        (55, Rect::new(40,403,20,16)),
        (56, Rect::new(60,403,20,16)),
        (57, Rect::new(80,403,20,16)),
        (58, Rect::new(0,419,20,16)),
        (59, Rect::new(20,419,20,16)),
        (6, Rect::new(40,419,16,16)),
        (60, Rect::new(56,419,20,16)),
        (61, Rect::new(76,419,20,16)),
        (62, Rect::new(0,435,20,16)),
        (63, Rect::new(20,435,20,16)),
        (64, Rect::new(40,435,20,16)),
        (65, Rect::new(60,435,20,16)),
        (66, Rect::new(80,435,20,16)),
        (67, Rect::new(0,451,20,16)),
        (68, Rect::new(20,451,20,16)),
        (69, Rect::new(40,451,20,16)),
        (7, Rect::new(60,451,16,16)),
        (70, Rect::new(76,451,20,16)),
        (71, Rect::new(0,467,20,16)),
        (72, Rect::new(20,467,20,16)),
        (73, Rect::new(40,467,20,16)),
        (74, Rect::new(60,467,20,16)),
        (75, Rect::new(80,467,20,16)),
        (76, Rect::new(0,483,20,16)),
        (77, Rect::new(20,483,20,16)),
        (78, Rect::new(40,483,20,16)),
        (79, Rect::new(60,483,20,16)),
        (8, Rect::new(80,483,16,16)),
        (80, Rect::new(0,499,20,16)),
        (81, Rect::new(20,499,20,16)),
        (82, Rect::new(40,499,20,16)),
        (83, Rect::new(60,499,20,16)),
        (84, Rect::new(80,499,20,16)),
        (85, Rect::new(0,515,20,16)),
        (86, Rect::new(20,515,20,16)),
        (87, Rect::new(40,515,20,16)),
        (88, Rect::new(60,515,20,16)),
        (9, Rect::new(80,515,16,16)),
        (139, Rect::new(0,531,72,15)),
        (140, Rect::new(0,546,68,15)),
        (138, Rect::new(0,561,176,14)),
        (129, Rect::new(0,575,20,13)),
        (130, Rect::new(20,575,20,13)),
        (131, Rect::new(40,575,20,13)),
        (132, Rect::new(60,575,20,13)),
        (109, Rect::new(80,575,16,12)),
        (110, Rect::new(96,575,16,12)),
        (111, Rect::new(112,575,16,12)),
        (112, Rect::new(128,575,16,12)),
        (141, Rect::new(0,588,130,12)),
        (143, Rect::new(130,588,16,12)),
        (133, Rect::new(0,600,62,11)),
        (134, Rect::new(62,600,62,11)),
        (135, Rect::new(0,611,62,11)),
        (136, Rect::new(62,611,62,11)),
        (137, Rect::new(0,622,62,11)),
        (148, Rect::new(62,622,8,11)),
        (149, Rect::new(70,622,8,11)),
        (150, Rect::new(78,622,8,11)),
        (151, Rect::new(86,622,8,11)),
        (152, Rect::new(94,622,8,11)),
        (153, Rect::new(102,622,8,11)),
        (154, Rect::new(110,622,8,11)),
        (155, Rect::new(118,622,8,11)),
        (156, Rect::new(126,622,8,11)),
        (157, Rect::new(134,622,8,11)),
        (105, Rect::new(142,622,18,8)),
        (106, Rect::new(0,633,18,8)),
        (107, Rect::new(18,633,18,8)),
        (108, Rect::new(36,633,18,8)),
        (142, Rect::new(54,633,6,4)),
        (121, Rect::new(60,633,20,3)),
        (122, Rect::new(80,633,20,3)),
        (123, Rect::new(100,633,20,3)),
        (124, Rect::new(120,633,20,3)),
        (125, Rect::new(140,633,20,3)),
        (126, Rect::new(0,641,20,3)),
        (127, Rect::new(20,641,12,3)),
        (128, Rect::new(32,641,12,3))
        ]
    .into_iter()
    .collect()
});

/// Holds tile mappings from tile ID to Rect on the texture
pub struct TileAtlas;

impl TileAtlas {
    /// ✅ Retrieves a `Rect` for a given tile ID
    pub fn get_offset(tile_id: u8) -> Rect {
        *TILE_MAP.get(&tile_id).unwrap_or(&Rect::new(0, 0, 0, 0))
    }

    /// ✅ Checks if a tile exists in the map
    pub fn has_tile(tile_id: u8) -> bool {
        TILE_MAP.contains_key(&tile_id)
    }
}